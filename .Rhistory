cor_data %>% filter(Var1 == "fantasy_points") %>% select(-Var1) %>% arrange(desc(value))
library(lme4)
library(multilevelmod)
player_folds <- group_vfold_cv(
train_data,
group = player_id,  # Preserve clusters in folds
v = 5             # 5-fold CV
)
mixed_mod_spec <- linear_reg() %>%
set_engine("lmer")
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1+ 1|wt_wopr|player_id) +
wt_wopr)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 5. Evaluate Performance
collect_metrics(cv_results)
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id))
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1+ 1|player_id) +
wt_fantasy_points+wt_receptions+
wt_wopr
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) +
wt_fantasy_points+wt_receptions+
wt_wopr
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 5. Evaluate Performance
collect_metrics(cv_results)
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) + (0 + wt_wopr|player_id) +
wt_fantasy_points+wt_receptions+
wt_wopr
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 5. Evaluate Performance
collect_metrics(cv_results)
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) + (1 + wt_wopr|player_id) +
wt_fantasy_points+
wt_wopr
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 5. Evaluate Performance
collect_metrics(cv_results)
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) +
wt_fantasy_points+
wt_wopr
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 5. Evaluate Performance
collect_metrics(cv_results)
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) +
wt_fantasy_points+
wt_wopr +
wt_receiving_tds
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 5. Evaluate Performance
collect_metrics(cv_results)
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) +
wt_fantasy_points+
wt_wopr +
wt_receiving_fumbles
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 5. Evaluate Performance
collect_metrics(cv_results)
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) +
wt_fantasy_points+
wt_wopr +
wt_receiving_tds
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 5. Evaluate Performance
collect_metrics(cv_results)
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) +
wt_fantasy_points+
wt_wopr +
wt_targets
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 5. Evaluate Performance
collect_metrics(cv_results)
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) +
wt_fantasy_points+
wt_wopr +
wt_receptions
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 5. Evaluate Performance
collect_metrics(cv_results)
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) +
wt_fantasy_points+
wt_wopr +
wt_receptions +
wt_targets
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 5. Evaluate Performance
collect_metrics(cv_results)
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) +
wt_fantasy_points+
wt_wopr +
#wt_receptions +
wt_targets
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
glm_wflow,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 5. Evaluate Performance
collect_metrics(cv_results)
# Setup workflow
glm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) +
wt_fantasy_points+
wt_wopr +
wt_receptions
)
# Build a tidymodels recipe object with fantasy points as the target
exp_recipe = train_data %>%
recipe(formula = fantasy_points ~ .) %>%
update_role(c(recent_team,log_fantasy_points,fantasy_points_ppr,fantasy_points_target),new_role = 'ID') %>%
add_role(player_id, new_role = "exp_unit") %>%
# Impute data with median from each column
step_impute_median(all_numeric_predictors()) %>%
# Remove zero variance predictors (ie. variables that contribute nothing to prediction)
step_zv(all_predictors()) %>%
step_center(all_numeric_predictors())
# Calculate the correlation matrix wrt to log fantasy points
cor_matrix <- train_data %>%
select(starts_with("wt_"), fantasy_points) %>%
cor(use = "complete.obs")
cor_data <- reshape2::melt(cor_matrix)
# Sort variables by correlation value
cor_data %>%
filter(Var1 == "fantasy_points") %>%
select(-Var1) %>%
arrange(desc(value))
# Calculate the correlation matrix wrt to log fantasy points
cor_matrix <- train_data %>%
select(starts_with("wt_"), fantasy_points) %>%
cor(use = "complete.obs")
cor_data <- reshape2::melt(cor_matrix)
# Sort variables by correlation value
cor_data %>%
filter(Var1 == "fantasy_points") %>%
select(-Var1) %>%
arrange(desc(value))
lm_wflow <- workflow %>%
add_recipe(exp_recipe) %>%
add_model(spec = lm_spec,formula = fantasy_points ~ wt_fantasy_points +
wt_wopr + wt_recetions)
lm_spec <- linear_reg() %>% set_engine("lm")
mixed_mod_spec <- linear_reg() %>%
set_engine("lmer")
# Setup workflow with model formula
mixed_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) +
wt_fantasy_points+
wt_wopr +
wt_receptions
)
lm_wflow <- workflow %>%
add_recipe(exp_recipe) %>%
add_model(spec = lm_spec,formula = fantasy_points ~ wt_fantasy_points +
wt_wopr + wt_recetions)
lm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = lm_spec,formula = fantasy_points ~ wt_fantasy_points +
wt_wopr + wt_recetions)
# Create workflow set for easier comparison
model_set <- as_workflow_set(
list(
linear_model = lm_wflow,
mixed_model = mixed_wflow
)
)
# Create workflow set for easier comparison
model_set <- as_workflow_set(
list(
linear_model = lm_wflow,
mixed_model = mixed_wflow
)
)
# Create workflow set for easier comparison
model_set <- as_workflow_set(
linear_model = lm_wflow,
mixed_model = mixed_wflow
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
model_set,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
model_set %>%
workflow_map(
seed = 1502,
resamples = player_folds,
fn = "fit_resamples",
metrics = metric_set(rmse, rsq, mae)
)
model_set %>%
workflow_map(
seed = 1502,
resamples = player_folds,
fn = "fit_resamples",
metrics = metric_set(rmse, rsq, mae)
)
lm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = lm_spec,formula = fantasy_points ~ wt_fantasy_points +
wt_wopr + wt_recetions)
Create workflow set for easier comparison
# Create workflow set for easier comparison
model_set <- as_workflow_set(
linear_model = lm_wflow,
mixed_model = mixed_wflow
)
model_set %>%
workflow_map(
seed = 1502,
fn = "fit_resamples",
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
library(lme4)
library(multilevelmod)
player_folds <- group_vfold_cv(
train_data,
group = player_id,  # Preserve clusters in folds
v = 5             # 5-fold CV
)
lm_spec <- linear_reg() %>% set_engine("lm")
mixed_mod_spec <- linear_reg() %>%
set_engine("lmer")
# Setup workflow with model formula
mixed_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) +
wt_fantasy_points+
wt_wopr +
wt_receptions
)
lm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = lm_spec,formula = fantasy_points ~ wt_fantasy_points +
wt_wopr + wt_receptions)
# Create workflow set for easier comparison
model_set <- as_workflow_set(
linear_model = lm_wflow,
mixed_model = mixed_wflow
)
model_set %>%
workflow_map(
seed = 1502,
fn = "fit_resamples",
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
cv_results <- model_set %>%
workflow_map(
seed = 1502,
fn = "fit_resamples",
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 5. Evaluate Performance
collect_metrics(cv_results)
### 5. Evaluate Performance
collect_metrics(cv_results, summarize = FALSE) %>%
filter(.metric == "roc_auc") %>%
```
### 5. Evaluate Performance
collect_metrics(cv_results, summarize = FALSE) %>%
filter(.metric == "rmse") %>%
```
### 5. Evaluate Performance
collect_metrics(cv_results, summarize = FALSE) %>%
filter(.metric == "rmse")
### 5. Evaluate Performance
collect_metrics(cv_results, summarize = FALSE) %>%
filter(.metric == "rmse") %>%
arrange(desc(.estimate))
### 5. Evaluate Performance
collect_metrics(cv_results, summarize = FALSE) %>%
filter(.metric == "rmse") %>%
arrange((.estimate))
### 5. Evaluate Performance
collect_metrics(cv_results, summarize = TRUE) %>%
filter(.metric == "rmse") %>%
group_by(wflow_id) %>%
arrange((.estimate))
### 5. Evaluate Performance
collect_metrics(cv_results, summarize = TRUE) %>%
filter(.metric == "rmse") %>%
arrange((.estimate))
### 5. Evaluate Performance
collect_metrics(cv_results, summarize = TRUE) %>%
filter(.metric == "rmse")
cv_results <- model_set %>%
workflow_map(
seed = 1502,
fn = "fit_resamples",
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
model_set,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
library(lme4)
library(multilevelmod)
player_folds <- group_vfold_cv(
train_data,
group = player_id,  # Preserve clusters in folds
v = 5             # 5-fold CV
)
lm_spec <- linear_reg() %>% set_engine("lm")
mixed_mod_spec <- linear_reg() %>%
set_engine("lmer")
# Setup workflow with model formula
mixed_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = mixed_mod_spec, formula = fantasy_points ~ 1 + (1|player_id) +
wt_fantasy_points+
wt_wopr +
wt_receptions
)
lm_wflow <- workflow() %>%
add_recipe(exp_recipe) %>%
add_model(spec = lm_spec,formula = fantasy_points ~ wt_fantasy_points +
wt_wopr + wt_receptions)
# Create workflow set for easier comparison
model_set <- as_workflow_set(
linear_model = lm_wflow,
mixed_model = mixed_wflow
)
cv_results <- model_set %>%
workflow_map(
seed = 1502,
fn = "fit_resamples",
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
model_set,
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 4. Perform Cross-Validation
cv_results <- fit_resamples(
model_set,
fn = "fit_resamples",
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 4. Perform Cross-Validation
cv_results <- workflow_map(
model_set,
fn = "fit_resamples",
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 4. Perform Cross-Validation
cv_results <- workflow_map(
model_set,
fn = "fit_resamples",
resamples = player_folds,
metrics = metric_set(rmse, rsq, mae)
)
### 5. Evaluate Performance
collect_metrics(cv_results, summarize = TRUE) %>%
filter(.metric == "rmse")
